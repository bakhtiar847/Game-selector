[
    {
      "id": "game-1",
      "name": "Bouncing Ball",
      "description": "A tiny demo where a ball bounces inside the canvas.",
      "content": "<!doctype html><html><head><meta charset=\"utf-8\"><title>Bouncing Ball</title><style>body{margin:0;display:flex;align-items:center;justify-content:center;height:100vh;background:#111;color:#fff}canvas{border:1px solid #333}</style></head><body><canvas id=\"c\"></canvas><script>const c=document.getElementById('c');const ctx=c.getContext('2d');function resize(){c.width=innerWidth*0.8;c.height=innerHeight*0.8}addEventListener('resize',resize);resize();let x=c.width/2,y=c.height/2,dx=3,dy=2,r=20;function frame(){ctx.clearRect(0,0,c.width,c.height);ctx.beginPath();ctx.fillStyle='#ff6';ctx.arc(x,y,r,0,Math.PI*2);ctx.fill();x+=dx;y+=dy;if(x+r>c.width||x-r<0)dx=-dx;if(y+r>c.height||y-r<0)dy=-dy;requestAnimationFrame(frame)}frame();</script></body></html>"
    },
    {
      "id": "game-2",
      "name": "Click Counter",
      "description": "A minimal game that counts clicks — the value is persisted to a cookie.",
      "content": "<!doctype html><html><head><meta charset=\"utf-8\"><title>Click Counter</title><style>body{font-family:Arial,Helvetica,sans-serif;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;background:#0b3a2e;color:#e6fff3}#box{background:rgba(255,255,255,0.06);padding:30px;border-radius:12px;text-align:center}button{font-size:18px;padding:10px 20px;border-radius:8px;border:0;background:#1fb27a;color:#012}</style></head><body><div id=\"box\"><h1>Score: <span id=\"score\">0</span></h1><button id=\"btn\">Click me</button></div><script>const COOKIE_NAME='click_counter_score';function setCookie(n,v,d){const e=new Date();e.setTime(e.getTime()+((d||365)*24*60*60*1000));document.cookie=encodeURIComponent(n)+'='+encodeURIComponent(v)+';expires='+e.toUTCString()+';path=/'}function getCookie(n){const parts=document.cookie.split('; ').map(p=>p.split('='));for(const p of parts){if(decodeURIComponent(p[0])===n) return decodeURIComponent(p[1]||'')}return null}let s=parseInt(getCookie(COOKIE_NAME))||0;document.getElementById('score').textContent=s;document.getElementById('btn').addEventListener('click',()=>{s++;document.getElementById('score').textContent=s;setCookie(COOKIE_NAME,s,365);});</script></body></html>"
    },
    {
      "id": "game-3",
      "name": "Tiny Runner",
      "description": "A tiny endless runner: press space to jump.",
      "content": "<!doctype html><html><head><meta charset=\"utf-8\"><title>Tiny Runner</title><style>body{margin:0;background:#081426;color:#dff7f0}canvas{display:block;margin:0 auto;background:#031220}</style></head><body><canvas id=\"c\" width=\"800\" height=\"200\"></canvas><script>const c=document.getElementById('c');const ctx=c.getContext('2d');let x=50,y=150,vy=0,ground=150;let obs=[400];let score=0;function loop(){ctx.clearRect(0,0,c.width,c.height);ctx.fillStyle='#1fb27a';ctx.fillRect(0,ground,800,50);ctx.fillStyle='#fff';ctx.fillRect(x,y-20,20,20);for(let i=0;i<obs.length;i++){obs[i]-=4;ctx.fillStyle='#ff6';ctx.fillRect(obs[i],ground-20,20,20);if(obs[i]<-20){obs.splice(i,1);obs.push(900+Math.random()*400);score++}}vy+=0.8;y+=vy;if(y>ground){y=ground;vy=0}ctx.fillStyle='#fff';ctx.fillText('Score:'+score,10,20);requestAnimationFrame(loop)}addEventListener('keydown',e=>{if(e.code==='Space'&&y===ground)vy=-12});loop();</script></body></html>"
    },
    {
      "id": "game-4",
      "name": "Color Swap",
      "description": "Tap to change the background color and match the target.",
      "content": "<!doctype html><html><head><meta charset=\"utf-8\"><title>Color Swap</title><style>body{margin:0;display:flex;align-items:center;justify-content:center;height:100vh;font-family:Arial;color:#00121a}#box{width:320px;height:320px;border-radius:12px;display:flex;align-items:center;justify-content:center;font-size:24px;cursor:pointer}</style></head><body><div id=\"box\">Tap</div><script>const box=document.getElementById('box');const colors=['#ffd6a5','#fdffb6','#caffbf','#9bf6ff','#bdb2ff'];let target=0;function update(){box.style.background=colors[Math.floor(Math.random()*colors.length)];}box.addEventListener('click',()=>{box.style.background=colors[++target%colors.length];});update();</script></body></html>"
    },
    {
      "id": "game-5",
      "name": "Tic Tac Toe",
      "description": "2-player Tic Tac Toe — choose Share Computer or Online via data channel. Adjustable board size.",
      "content": "<!doctype html><html><head><meta charset=\"utf-8\"><title>Tic Tac Toe</title><style>body{font-family:system-ui,Arial;background:#071023;color:#cfeef0;display:flex;flex-direction:column;align-items:center;padding:20px}#board{display:grid;gap:6px}button.cell{width:64px;height:64px;font-size:20px;border-radius:6px;border:0;background:#0b2230;color:#dff7f0}#controls{margin:12px}input{width:60px}.mode{padding:6px;border-radius:6px;border:0;background:transparent;color:var(--muted);cursor:pointer}.mode.sel{background:#1fb27a;color:#012}</style></head><body><h1>Tic Tac Toe</h1><div id=\"controls\">Size: <input id=\"size\" type=\"number\" min=\"3\" value=\"3\"> <button id=\"start\">Start</button> <button id=\"share\" class=\"mode\">Share Computer</button> <button id=\"online\" class=\"mode\">Online</button> <span style=\"margin-left:12px;color:#7fffd4\">Turn: <strong id=\"turn\">X</strong></span></div><div id=\"board\"></div><script>const bc=new BroadcastChannel('game-sync');const id=window.GAME_ID||'game-5';let size=3, board=[], turn='X', mySide='X', online=false;const boardEl=document.getElementById('board');function updateTurn(){const t=document.getElementById('turn'); if(t) t.textContent=turn;}function updateMode(){const s=document.getElementById('share');const o=document.getElementById('online'); if(s) s.classList.toggle('sel', !online); if(o) o.classList.toggle('sel', online);}function makeBoard(){board=Array(size*size).fill(''); boardEl.style.gridTemplateColumns='repeat('+size+',64px)'; boardEl.innerHTML=''; for(let i=0;i<size*size;i++){const b=document.createElement('button');b.className='cell';b.dataset.i=i;b.addEventListener('click',()=>play(i)); boardEl.appendChild(b);} render(); updateTurn(); updateMode();}function render(){for(let i=0;i<size*size;i++){const b=boardEl.children[i];b.textContent=board[i]||''}}function play(i){ if(board[i]) return; board[i]=turn; render(); checkWin(); const msg={gameId:id,type:'tictac',action:'move',i,mark:turn}; if(online) bc.postMessage(msg); else if(window.opener && window.opener.postMessage){window.opener.postMessage(msg,'*');} turn = turn==='X'?'O':'X'; updateTurn();}function checkWin(){const lines=[]; for(let r=0;r<size;r++){const row=[]; for(let c=0;c<size;c++) row.push(r*size+c); lines.push(row);} for(let c=0;c<size;c++){const col=[]; for(let r=0;r<size;r++) col.push(r*size+c); lines.push(col);} const diag1=[]; const diag2=[]; for(let i=0;i<size;i++){diag1.push(i*size+i); diag2.push(i*size+(size-1-i));} lines.push(diag1); lines.push(diag2); for(const L of lines){const s=new Set(L.map(i=>board[i])); if(s.size===1 && !s.has('')){ alert('Winner: '+board[L[0]]); return; }} if(board.every(Boolean)){ alert('Draw'); }}bc.onmessage = ev => { const m=ev.data; if(m.gameId!==id) return; if(m.type==='tictac'&&m.action==='move'){ board[m.i]=m.mark; turn = mySide; render(); updateTurn(); }};window.addEventListener('message', e=>{const m=e.data; if(m && m.gameId===id && m.type==='tictac' && m.action==='move'){ board[m.i]=m.mark; turn=mySide; render(); updateTurn(); }});document.getElementById('start').addEventListener('click', ()=>{size=parseInt(document.getElementById('size').value)||3; makeBoard();});document.getElementById('share').addEventListener('click', ()=>{online=false; updateMode(); alert('Sharing computer: local play.');});document.getElementById('online').addEventListener('click', ()=>{online=true; updateMode(); alert('Online mode: ensure a data channel is established between peers.');});makeBoard();</script></body></html>"
    },
    {
      "id": "game-6",
      "name": "Meta Tic Tac Toe",
      "description": "Play on a meta-board: win a small tic-tac-toe to claim its square. Adjustable small board size.",
  "content": "<!doctype html><html><head><meta charset=\"utf-8\"><title>Meta Tic Tac Toe</title><style>body{font-family:system-ui,Arial;background:#071023;color:#cfeef0;display:flex;flex-direction:column;align-items:center;padding:12px}#controls{margin:8px;display:flex;gap:8px;align-items:center;flex-wrap:wrap}canvas{background:#02121a;border-radius:8px;box-shadow:0 6px 18px rgba(0,0,0,0.6)}.mode{padding:6px;border-radius:6px;border:0;background:transparent;color:#cfeef0;cursor:pointer}.mode.sel{background:#1fb27a;color:#012}#turnDisplay{color:#7fffd4;margin-left:12px;font-weight:700}#winnerOverlay{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;font-size:48px;color:rgba(255,255,255,0.95);pointer-events:none;text-shadow:0 6px 18px rgba(0,0,0,0.8)}</style></head><body><h1>Meta Tic Tac Toe</h1><div id=\"controls\">Small size: <input id=\"ss\" type=\"number\" min=\"3\" value=\"3\" style=\"width:64px\"> Large board: <input id=\"grid\" type=\"number\" min=\"2\" value=\"3\" style=\"width:64px\"> <button id=\"start\">Start</button> <button id=\"share\" class=\"mode\">Share Computer</button> <button id=\"online\" class=\"mode\">Online</button> <span id=\"turnDisplay\">Turn: <span id=\"turn\">X</span></span></div><div style=\"position:relative;display:inline-block;\"><canvas id=\"meta\" width=\"720\" height=\"720\"></canvas><div id=\"winnerOverlay\" style=\"display:none\"></div></div><script>const id=window.GAME_ID||'game-6';const bc=new BroadcastChannel('game-sync');const canvas=document.getElementById('meta');const ctx=canvas.getContext('2d');let small=3, grid=3;let smallState=[];let winners=[];let cellW=0,cellH=0;let turn='X', mySide='X', online=false;let finished=false;function updateTurn(){const t=document.getElementById('turn'); if(t) t.textContent=turn;}function updateMode(){const s=document.getElementById('share');const o=document.getElementById('online'); if(s) s.classList.toggle('sel', !online); if(o) o.classList.toggle('sel', online);}function makeEmptySmall(sz){ return Array(sz*sz).fill(''); }function start(){ if(finished) finished=false; small=parseInt(document.getElementById('ss').value)||3; grid=parseInt(document.getElementById('grid').value)||3; smallState = Array(grid*grid).fill(null).map(()=>makeEmptySmall(small)); winners = Array(grid*grid).fill(null); cellW = canvas.width / grid; cellH = canvas.height / grid; draw(); updateTurn(); updateMode();}\n\nfunction checkSmallWin(arr){ const sz = Math.sqrt(arr.length); if(!Number.isInteger(sz)) return null; const lines = []; for(let r=0;r<sz;r++){ const row=[]; for(let c=0;c<sz;c++) row.push(r*sz+c); lines.push(row);} for(let c=0;c<sz;c++){ const col=[]; for(let r=0;r<sz;r++) col.push(r*sz+c); lines.push(col);} const d1=[]; const d2=[]; for(let i=0;i<sz;i++){ d1.push(i*sz+i); d2.push(i*sz+(sz-1-i)); } lines.push(d1); lines.push(d2); for(const L of lines){ const s=new Set(L.map(i=>arr[i])); if(s.size===1 && !s.has('')) return arr[L[0]]; } if(arr.every(Boolean)) return 'D'; return null; }\n\nfunction checkMetaWin(){ // determine if any player has won the meta board\n  const map = winners.slice(); // array of 'X','O',null or 'D'\n  // treat draws as occupied but not a win\n  const lines=[]; for(let r=0;r<grid;r++){ const row=[]; for(let c=0;c<grid;c++) row.push(r*grid+c); lines.push(row);} for(let c=0;c<grid;c++){ const col=[]; for(let r=0;r<grid;r++) col.push(r*grid+c); lines.push(col);} const d1=[]; const d2=[]; for(let i=0;i<grid;i++){ d1.push(i*grid+i); d2.push(i*grid+(grid-1-i)); } lines.push(d1); lines.push(d2); for(const L of lines){ const s=new Set(L.map(i=>map[i])); if(s.size===1 && !s.has(null) && !s.has('D')) return map[L[0]]; } if(map.every(v=>v!==null)) return 'D'; return null; }\n\nfunction draw(){ ctx.clearRect(0,0,canvas.width,canvas.height); // draw meta cells\n for(let gy=0;gy<grid;gy++){ for(let gx=0;gx<grid;gx++){ const bi = gy*grid+gx; const baseX = gx*cellW, baseY = gy*cellH; // small board background\n   ctx.strokeStyle = '#173241'; ctx.lineWidth=2; ctx.strokeRect(baseX+1, baseY+1, cellW-2, cellH-2);\n   // if small board won, fill it\n   const w = winners[bi]; if(w && w!=='D'){ ctx.fillStyle = w==='X' ? 'rgba(94,234,212,0.12)' : 'rgba(255,184,107,0.12)'; ctx.fillRect(baseX+2, baseY+2, cellW-4, cellH-4); ctx.font = Math.floor(Math.min(cellW,cellH)*0.4)+'px Arial'; ctx.fillStyle = w==='X'? '#5eead4' : '#ffb86b'; ctx.fillText(w, baseX + cellW*0.5 - 8, baseY + cellH*0.55); }\n   // draw small grid lines and marks\n   const s = small; const sw = cellW / s, sh = cellH / s; ctx.strokeStyle='#0b2b33'; ctx.lineWidth=1;\n   for(let sy=0; sy<s; sy++){ for(let sx=0; sx<s; sx++){ const i = sx + sy*s; const val = smallState[bi] ? smallState[bi][i] : ''; const cx = baseX + sx*sw, cy = baseY + sy*sh; ctx.strokeRect(cx+1, cy+1, sw-2, sh-2); if(val){ ctx.fillStyle = val==='X'? '#5eead4' : '#ffb86b'; ctx.font = Math.max(12, Math.floor(sh*0.6))+'px Arial'; ctx.fillText(val, cx + sw*0.5 - 6, cy + sh*0.6); } } }\n }\n }\n // draw meta separators (thicker)\n ctx.strokeStyle='#173241'; ctx.lineWidth=4; for(let i=1;i<grid;i++){ const x = i*cellW; ctx.beginPath(); ctx.moveTo(x,0); ctx.lineTo(x,canvas.height); ctx.stroke(); const y = i*cellH; ctx.beginPath(); ctx.moveTo(0,y); ctx.lineTo(canvas.width,y); ctx.stroke(); }\n // update overlay if meta won\n const meta = checkMetaWin(); const overlay = document.getElementById('winnerOverlay'); if(meta){ if(meta==='D'){ overlay.textContent = 'Draw!'; } else { overlay.textContent = meta + ' wins the meta-board!'; } overlay.style.display='flex'; finished=true; } else { overlay.style.display='none'; }\n}\n\ncanvas.addEventListener('click', e=>{ if(finished) return; const rect=canvas.getBoundingClientRect(); const rx=(e.clientX-rect.left)*(canvas.width/rect.width), ry=(e.clientY-rect.top)*(canvas.height/rect.height); const gx=Math.floor(rx/cellW), gy=Math.floor(ry/cellH); if(gx<0||gy<0||gx>=grid||gy>=grid) return; const bx=rx - gx*cellW, by=ry - gy*cellH; const sx=Math.floor(bx/(cellW/small)), sy=Math.floor(by/(cellH/small)); const gi=gy*grid+gx; const si=sx+sy*small; if(!smallState[gi]) return; if(smallState[gi][si]) return; smallState[gi][si]=turn; // update small winner\n const w = checkSmallWin(smallState[gi]); if(w){ winners[gi]=w; }\n // check meta winner\n const mw = checkMetaWin(); if(mw) { /* handled in draw overlay */ }\n draw(); const msg={gameId:id,type:'meta',action:'move',gi,si,mark:turn}; if(online) bc.postMessage(msg); else if(window.opener && window.opener.postMessage) window.opener.postMessage(msg,'*'); turn = turn==='X'?'O':'X'; updateTurn(); });\n\nbc.onmessage=ev=>{const m=ev.data; if(m.gameId!==id) return; if(m.type==='meta'&&m.action==='move'){ smallState[m.gi][m.si]=m.mark; const w = checkSmallWin(smallState[m.gi]); if(w) winners[m.gi]=w; draw(); updateTurn(); } };\n window.addEventListener('message', e=>{const m=e.data; if(m && m.gameId===id && m.type==='meta' && m.action==='move'){ smallState[m.gi][m.si]=m.mark; const w = checkSmallWin(smallState[m.gi]); if(w) winners[m.gi]=w; draw(); updateTurn(); }});\n document.getElementById('start').addEventListener('click', start); document.getElementById('share').addEventListener('click', ()=>{online=false; updateMode(); alert('Sharing computer');}); document.getElementById('online').addEventListener('click', ()=>{online=true; updateMode(); alert('Online mode');}); start();<\/script></body></html>"
    },
    {
      "id": "game-7",
      "name": "External Sample (URL)",
      "description": "An entry that references a game by URL instead of embedding full HTML.",
      "url": "https://example.com/"
    }
]
